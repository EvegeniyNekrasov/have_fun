/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as SublinkTestImport } from './routes/sublink-test'
import { Route as OthersublinkTestImport } from './routes/othersublink-test'
import { Route as IndexImport } from './routes/index'
import { Route as VehiclesIndexImport } from './routes/vehicles/index'
import { Route as DriversIndexImport } from './routes/drivers/index'
import { Route as VehiclesVehicleIdImport } from './routes/vehicles/$vehicleId'
import { Route as DriversDriversIdImport } from './routes/drivers/$driversId'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const SublinkTestRoute = SublinkTestImport.update({
  id: '/sublink-test',
  path: '/sublink-test',
  getParentRoute: () => rootRoute,
} as any)

const OthersublinkTestRoute = OthersublinkTestImport.update({
  id: '/othersublink-test',
  path: '/othersublink-test',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VehiclesIndexRoute = VehiclesIndexImport.update({
  id: '/vehicles/',
  path: '/vehicles/',
  getParentRoute: () => rootRoute,
} as any)

const DriversIndexRoute = DriversIndexImport.update({
  id: '/drivers/',
  path: '/drivers/',
  getParentRoute: () => rootRoute,
} as any)

const VehiclesVehicleIdRoute = VehiclesVehicleIdImport.update({
  id: '/vehicles/$vehicleId',
  path: '/vehicles/$vehicleId',
  getParentRoute: () => rootRoute,
} as any)

const DriversDriversIdRoute = DriversDriversIdImport.update({
  id: '/drivers/$driversId',
  path: '/drivers/$driversId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/othersublink-test': {
      id: '/othersublink-test'
      path: '/othersublink-test'
      fullPath: '/othersublink-test'
      preLoaderRoute: typeof OthersublinkTestImport
      parentRoute: typeof rootRoute
    }
    '/sublink-test': {
      id: '/sublink-test'
      path: '/sublink-test'
      fullPath: '/sublink-test'
      preLoaderRoute: typeof SublinkTestImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/drivers/$driversId': {
      id: '/drivers/$driversId'
      path: '/drivers/$driversId'
      fullPath: '/drivers/$driversId'
      preLoaderRoute: typeof DriversDriversIdImport
      parentRoute: typeof rootRoute
    }
    '/vehicles/$vehicleId': {
      id: '/vehicles/$vehicleId'
      path: '/vehicles/$vehicleId'
      fullPath: '/vehicles/$vehicleId'
      preLoaderRoute: typeof VehiclesVehicleIdImport
      parentRoute: typeof rootRoute
    }
    '/drivers/': {
      id: '/drivers/'
      path: '/drivers'
      fullPath: '/drivers'
      preLoaderRoute: typeof DriversIndexImport
      parentRoute: typeof rootRoute
    }
    '/vehicles/': {
      id: '/vehicles/'
      path: '/vehicles'
      fullPath: '/vehicles'
      preLoaderRoute: typeof VehiclesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/othersublink-test': typeof OthersublinkTestRoute
  '/sublink-test': typeof SublinkTestRoute
  '/test': typeof TestRoute
  '/drivers/$driversId': typeof DriversDriversIdRoute
  '/vehicles/$vehicleId': typeof VehiclesVehicleIdRoute
  '/drivers': typeof DriversIndexRoute
  '/vehicles': typeof VehiclesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/othersublink-test': typeof OthersublinkTestRoute
  '/sublink-test': typeof SublinkTestRoute
  '/test': typeof TestRoute
  '/drivers/$driversId': typeof DriversDriversIdRoute
  '/vehicles/$vehicleId': typeof VehiclesVehicleIdRoute
  '/drivers': typeof DriversIndexRoute
  '/vehicles': typeof VehiclesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/othersublink-test': typeof OthersublinkTestRoute
  '/sublink-test': typeof SublinkTestRoute
  '/test': typeof TestRoute
  '/drivers/$driversId': typeof DriversDriversIdRoute
  '/vehicles/$vehicleId': typeof VehiclesVehicleIdRoute
  '/drivers/': typeof DriversIndexRoute
  '/vehicles/': typeof VehiclesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/othersublink-test'
    | '/sublink-test'
    | '/test'
    | '/drivers/$driversId'
    | '/vehicles/$vehicleId'
    | '/drivers'
    | '/vehicles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/othersublink-test'
    | '/sublink-test'
    | '/test'
    | '/drivers/$driversId'
    | '/vehicles/$vehicleId'
    | '/drivers'
    | '/vehicles'
  id:
    | '__root__'
    | '/'
    | '/othersublink-test'
    | '/sublink-test'
    | '/test'
    | '/drivers/$driversId'
    | '/vehicles/$vehicleId'
    | '/drivers/'
    | '/vehicles/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OthersublinkTestRoute: typeof OthersublinkTestRoute
  SublinkTestRoute: typeof SublinkTestRoute
  TestRoute: typeof TestRoute
  DriversDriversIdRoute: typeof DriversDriversIdRoute
  VehiclesVehicleIdRoute: typeof VehiclesVehicleIdRoute
  DriversIndexRoute: typeof DriversIndexRoute
  VehiclesIndexRoute: typeof VehiclesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OthersublinkTestRoute: OthersublinkTestRoute,
  SublinkTestRoute: SublinkTestRoute,
  TestRoute: TestRoute,
  DriversDriversIdRoute: DriversDriversIdRoute,
  VehiclesVehicleIdRoute: VehiclesVehicleIdRoute,
  DriversIndexRoute: DriversIndexRoute,
  VehiclesIndexRoute: VehiclesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/othersublink-test",
        "/sublink-test",
        "/test",
        "/drivers/$driversId",
        "/vehicles/$vehicleId",
        "/drivers/",
        "/vehicles/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/othersublink-test": {
      "filePath": "othersublink-test.tsx"
    },
    "/sublink-test": {
      "filePath": "sublink-test.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/drivers/$driversId": {
      "filePath": "drivers/$driversId.tsx"
    },
    "/vehicles/$vehicleId": {
      "filePath": "vehicles/$vehicleId.tsx"
    },
    "/drivers/": {
      "filePath": "drivers/index.tsx"
    },
    "/vehicles/": {
      "filePath": "vehicles/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
